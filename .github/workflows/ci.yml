---
name: CI/CD Pipeline

on:
  pull_request:
    branches: [main, master]
  push:
    branches: [main, master]

permissions:
  contents: read
  pull-requests: write
  issues: write
  pages: write
  id-token: write

env:
  GO_VERSION: '1.24.2'
  COVERAGE_THRESHOLD: 50

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: shipit_test
          POSTGRES_DB: shipit_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install dependencies
        run: |
          go mod download
          go mod verify
          go install github.com/axw/gocov/gocov@latest
          go install github.com/AlekSi/gocov-xml@latest

      # - name: Run linter
      #   uses: golangci/golangci-lint-action@v8
      #   with:
      #     version: latest
      #     args: --timeout=5m

      - name: Run tests with coverage
        run: |
          go test -v ./test/... -coverprofile=coverage.out -covermode=atomic \
            -coverpkg=./...
          go tool cover -func=coverage.out -o=coverage.txt
          go tool cover -html=coverage.out -o=coverage.html
          gocov convert coverage.out > coverage.json
          gocov-xml < coverage.json > coverage.xml

      - name: Check coverage threshold
        run: |
          # Extract total coverage percentage
          COVERAGE=$(go tool cover -func=coverage.out | grep total | \
            awk '{print $3}' | sed 's/%//')
          echo "Total coverage: ${COVERAGE}%"
          echo "Threshold: ${COVERAGE_THRESHOLD}%"

          # Convert to integer for comparison
          COVERAGE_INT=$(echo $COVERAGE | cut -d. -f1)
          THRESHOLD_INT=$COVERAGE_THRESHOLD

          if [ $COVERAGE_INT -lt $THRESHOLD_INT ]; then
            echo "‚ùå Coverage ${COVERAGE}% is below threshold \
              ${COVERAGE_THRESHOLD}%"
            exit 1
          else
            echo "‚úÖ Coverage ${COVERAGE}% meets threshold \
              ${COVERAGE_THRESHOLD}%"
          fi

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage.out
            coverage.html
            coverage.txt
            coverage.json
            coverage.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          name: codecov-umbrella
          fail_ci_if_error: false
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}


  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Build application
        run: |
          make build
          make build-linux

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-binaries
          path: bin/

  docs:
    name: Build and Deploy API Documentation
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Swagger UI
        run: |
          npm install -g swagger-ui-dist

      - name: Install Swaggo
        run: |
          go install github.com/swaggo/swag/cmd/swag@latest

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install dependencies
        run: |
          go mod download
          go mod verify

      - name: Generate Swagger documentation
        run: |
          swag init -g cmd/server/main.go -o docs

      - name: Create documentation directory
        run: mkdir -p docs-build

      - name: Generate Swagger HTML
        run: |
          cat > docs-build/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>ShipIt Server API Documentation</title>
              <link rel="stylesheet" type="text/css" href="https://unpkg.com/swagger-ui-dist@5.9.0/swagger-ui.css" />
              <style>
                  html {
                      box-sizing: border-box;
                      overflow: -moz-scrollbars-vertical;
                      overflow-y: scroll;
                  }
                  *, *:before, *:after {
                      box-sizing: inherit;
                  }
                  body {
                      margin:0;
                      background: #fafafa;
                  }
                  .swagger-ui .topbar {
                      display: none;
                  }
                  .swagger-ui .info .title {
                      color: #3b4151;
                      font-size: 36px;
                      font-weight: 600;
                      margin: 0;
                      font-family: sans-serif;
                  }
                  .swagger-ui .info .description {
                      font-size: 14px;
                      line-height: 1.5em;
                      color: #3b4151;
                      margin: 1em 0;
                      font-family: sans-serif;
                  }
              </style>
          </head>
          <body>
              <div id="swagger-ui"></div>
              <script src="https://unpkg.com/swagger-ui-dist@5.9.0/swagger-ui-bundle.js"></script>
              <script src="https://unpkg.com/swagger-ui-dist@5.9.0/swagger-ui-standalone-preset.js"></script>
              <script>
                  window.onload = function() {
                      const ui = SwaggerUIBundle({
                          url: './swagger.json',
                          dom_id: '#swagger-ui',
                          deepLinking: true,
                          presets: [
                              SwaggerUIBundle.presets.apis,
                              SwaggerUIStandalonePreset
                          ],
                          plugins: [
                              SwaggerUIBundle.plugins.DownloadUrl
                          ],
                          layout: "StandaloneLayout",
                          validatorUrl: null,
                          onComplete: function() {
                              console.log('Swagger UI loaded successfully');
                          }
                      });
                  };
              </script>
          </body>
          </html>
          EOF

      - name: Copy Swagger files
        run: |
          cp docs/swagger.json docs-build/
          cp docs/swagger.yaml docs-build/

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs-build

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
          name: coverage-reports
          path: ./

      - name: Quality Gate Check
        run: |
          echo "üîç Running Quality Gates..."

          # Check if coverage file exists
          if [ ! -f coverage.txt ]; then
            echo "‚ùå Coverage file not found"
            exit 1
          fi

          # Extract total coverage
          COVERAGE=$(grep "total:" coverage.txt | awk '{print $3}' | \
            sed 's/%//')
          echo "üìä Total Coverage: ${COVERAGE}%"

          # Check coverage threshold
          COVERAGE_INT=$(echo $COVERAGE | cut -d. -f1)
          THRESHOLD_INT=$COVERAGE_THRESHOLD

          if [ $COVERAGE_INT -lt $THRESHOLD_INT ]; then
            echo "‚ùå QUALITY GATE FAILED: Coverage ${COVERAGE}% is below \
              threshold ${COVERAGE_THRESHOLD}%"
            echo "üö® Please add more tests to improve coverage"
            exit 1
          else
            echo "‚úÖ QUALITY GATE PASSED: Coverage ${COVERAGE}% meets \
              threshold ${COVERAGE_THRESHOLD}%"
          fi

          echo "üéâ All quality gates passed!"

      - name: Comment PR with coverage results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let coverage = 'N/A';

            try {
              const coverageText = fs.readFileSync('coverage.txt', 'utf8');
              const match = coverageText.match(
                /total:\s+\(statements\)\s+(\d+\.\d+)%/
              );
              if (match) {
                coverage = match[1] + '%';
              }
            } catch (error) {
              console.log('Could not read coverage file');
            }

            const threshold = process.env.COVERAGE_THRESHOLD;
            const coverageNum = parseFloat(coverage);
            const thresholdNum = parseFloat(threshold);

            let status = '‚úÖ';
            let message = `Coverage: ${coverage} (meets threshold of \
              ${threshold}%)`;

            if (coverageNum < thresholdNum) {
              status = '‚ùå';
              message = `Coverage: ${coverage} (below threshold of \
                ${threshold}%)`;
            }

            const comment = `## Quality Gate Results

            ${status} **Coverage Quality Gate**: ${message}

            ---
            *This comment was automatically generated by the CI/CD pipeline.*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
