// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package sqlc

import (
	"net/netip"

	"github.com/jackc/pgx/v5/pgtype"
)

type ApiKeys struct {
	ID         pgtype.UUID        `db:"id" json:"id"`
	UserID     pgtype.UUID        `db:"user_id" json:"user_id"`
	Name       string             `db:"name" json:"name"`
	Prefix     string             `db:"prefix" json:"prefix"`
	Hash       string             `db:"hash" json:"hash"`
	IsActive   bool               `db:"is_active" json:"is_active"`
	LastUsedAt pgtype.Timestamptz `db:"last_used_at" json:"last_used_at"`
	ExpiresAt  pgtype.Timestamptz `db:"expires_at" json:"expires_at"`
	Scopes     []string           `db:"scopes" json:"scopes"`
	CreatedAt  pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type Connections struct {
	ID         pgtype.UUID        `db:"id" json:"id"`
	TunnelID   pgtype.UUID        `db:"tunnel_id" json:"tunnel_id"`
	RemoteAddr netip.Addr         `db:"remote_addr" json:"remote_addr"`
	LocalAddr  netip.Addr         `db:"local_addr" json:"local_addr"`
	IsActive   bool               `db:"is_active" json:"is_active"`
	BytesIn    int64              `db:"bytes_in" json:"bytes_in"`
	BytesOut   int64              `db:"bytes_out" json:"bytes_out"`
	StartedAt  pgtype.Timestamptz `db:"started_at" json:"started_at"`
	EndedAt    pgtype.Timestamptz `db:"ended_at" json:"ended_at"`
}

type LoginAttempts struct {
	ID            pgtype.UUID        `db:"id" json:"id"`
	Email         string             `db:"email" json:"email"`
	IpAddress     netip.Addr         `db:"ip_address" json:"ip_address"`
	Success       bool               `db:"success" json:"success"`
	FailureReason pgtype.Text        `db:"failure_reason" json:"failure_reason"`
	UserAgent     pgtype.Text        `db:"user_agent" json:"user_agent"`
	CreatedAt     pgtype.Timestamptz `db:"created_at" json:"created_at"`
}

type RefreshTokens struct {
	ID        pgtype.UUID        `db:"id" json:"id"`
	UserID    pgtype.UUID        `db:"user_id" json:"user_id"`
	TokenHash string             `db:"token_hash" json:"token_hash"`
	IsRevoked bool               `db:"is_revoked" json:"is_revoked"`
	ExpiresAt pgtype.Timestamptz `db:"expires_at" json:"expires_at"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
}

type TunnelAnalytics struct {
	ID              pgtype.UUID        `db:"id" json:"id"`
	TunnelID        pgtype.UUID        `db:"tunnel_id" json:"tunnel_id"`
	RequestsCount   int64              `db:"requests_count" json:"requests_count"`
	BytesIn         int64              `db:"bytes_in" json:"bytes_in"`
	BytesOut        int64              `db:"bytes_out" json:"bytes_out"`
	ResponseTimeAvg pgtype.Float4      `db:"response_time_avg" json:"response_time_avg"`
	ErrorCount      int64              `db:"error_count" json:"error_count"`
	Timestamp       pgtype.Timestamptz `db:"timestamp" json:"timestamp"`
}

type Tunnels struct {
	ID             pgtype.UUID        `db:"id" json:"id"`
	UserID         pgtype.UUID        `db:"user_id" json:"user_id"`
	Name           string             `db:"name" json:"name"`
	Protocol       string             `db:"protocol" json:"protocol"`
	Subdomain      pgtype.Text        `db:"subdomain" json:"subdomain"`
	CustomDomain   pgtype.Text        `db:"custom_domain" json:"custom_domain"`
	TargetHost     string             `db:"target_host" json:"target_host"`
	TargetPort     int32              `db:"target_port" json:"target_port"`
	PublicPort     pgtype.Int4        `db:"public_port" json:"public_port"`
	Status         string             `db:"status" json:"status"`
	AuthToken      pgtype.Text        `db:"auth_token" json:"auth_token"`
	MaxConnections pgtype.Int4        `db:"max_connections" json:"max_connections"`
	ExpiresAt      pgtype.Timestamptz `db:"expires_at" json:"expires_at"`
	Metadata       []byte             `db:"metadata" json:"metadata"`
	CreatedAt      pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type UserSessions struct {
	ID           pgtype.UUID        `db:"id" json:"id"`
	UserID       pgtype.UUID        `db:"user_id" json:"user_id"`
	SessionToken string             `db:"session_token" json:"session_token"`
	IpAddress    *netip.Addr        `db:"ip_address" json:"ip_address"`
	UserAgent    pgtype.Text        `db:"user_agent" json:"user_agent"`
	IsActive     bool               `db:"is_active" json:"is_active"`
	ExpiresAt    pgtype.Timestamptz `db:"expires_at" json:"expires_at"`
	CreatedAt    pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type Users struct {
	ID                     pgtype.UUID        `db:"id" json:"id"`
	Email                  string             `db:"email" json:"email"`
	PasswordHash           string             `db:"password_hash" json:"password_hash"`
	Name                   string             `db:"name" json:"name"`
	Role                   string             `db:"role" json:"role"`
	IsActive               bool               `db:"is_active" json:"is_active"`
	EmailVerified          bool               `db:"email_verified" json:"email_verified"`
	EmailVerificationToken pgtype.Text        `db:"email_verification_token" json:"email_verification_token"`
	PasswordResetToken     pgtype.Text        `db:"password_reset_token" json:"password_reset_token"`
	PasswordResetExpiresAt pgtype.Timestamptz `db:"password_reset_expires_at" json:"password_reset_expires_at"`
	LastLoginAt            pgtype.Timestamptz `db:"last_login_at" json:"last_login_at"`
	FailedLoginAttempts    int32              `db:"failed_login_attempts" json:"failed_login_attempts"`
	LockedUntil            pgtype.Timestamptz `db:"locked_until" json:"locked_until"`
	CreatedAt              pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt              pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}
