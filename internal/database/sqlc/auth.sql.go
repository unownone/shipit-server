// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: auth.sql

package sqlc

import (
	"context"
	"net/netip"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countFailedLoginAttempts = `-- name: CountFailedLoginAttempts :one
SELECT COUNT(*) FROM login_attempts 
WHERE email = $1 AND success = false AND created_at > $2
`

type CountFailedLoginAttemptsParams struct {
	Email     string             `db:"email" json:"email"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
}

func (q *Queries) CountFailedLoginAttempts(ctx context.Context, arg CountFailedLoginAttemptsParams) (int64, error) {
	row := q.db.QueryRow(ctx, countFailedLoginAttempts, arg.Email, arg.CreatedAt)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createLoginAttempt = `-- name: CreateLoginAttempt :one
INSERT INTO login_attempts (
    email, ip_address, success, failure_reason, user_agent
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, email, ip_address, success, failure_reason, user_agent, created_at
`

type CreateLoginAttemptParams struct {
	Email         string      `db:"email" json:"email"`
	IpAddress     netip.Addr  `db:"ip_address" json:"ip_address"`
	Success       bool        `db:"success" json:"success"`
	FailureReason pgtype.Text `db:"failure_reason" json:"failure_reason"`
	UserAgent     pgtype.Text `db:"user_agent" json:"user_agent"`
}

func (q *Queries) CreateLoginAttempt(ctx context.Context, arg CreateLoginAttemptParams) (LoginAttempts, error) {
	row := q.db.QueryRow(ctx, createLoginAttempt,
		arg.Email,
		arg.IpAddress,
		arg.Success,
		arg.FailureReason,
		arg.UserAgent,
	)
	var i LoginAttempts
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.IpAddress,
		&i.Success,
		&i.FailureReason,
		&i.UserAgent,
		&i.CreatedAt,
	)
	return i, err
}

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO refresh_tokens (
    user_id, token_hash, expires_at
) VALUES (
    $1, $2, $3
) RETURNING id, user_id, token_hash, is_revoked, expires_at, created_at
`

type CreateRefreshTokenParams struct {
	UserID    uuid.UUID        `db:"user_id" json:"user_id"`
	TokenHash string             `db:"token_hash" json:"token_hash"`
	ExpiresAt pgtype.Timestamptz `db:"expires_at" json:"expires_at"`
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshTokens, error) {
	row := q.db.QueryRow(ctx, createRefreshToken, arg.UserID, arg.TokenHash, arg.ExpiresAt)
	var i RefreshTokens
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TokenHash,
		&i.IsRevoked,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const createUserSession = `-- name: CreateUserSession :one
INSERT INTO user_sessions (
    user_id, session_token, ip_address, user_agent, expires_at
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, user_id, session_token, ip_address, user_agent, is_active, expires_at, created_at, updated_at
`

type CreateUserSessionParams struct {
	UserID       uuid.UUID        `db:"user_id" json:"user_id"`
	SessionToken string             `db:"session_token" json:"session_token"`
	IpAddress    *netip.Addr        `db:"ip_address" json:"ip_address"`
	UserAgent    pgtype.Text        `db:"user_agent" json:"user_agent"`
	ExpiresAt    pgtype.Timestamptz `db:"expires_at" json:"expires_at"`
}

func (q *Queries) CreateUserSession(ctx context.Context, arg CreateUserSessionParams) (UserSessions, error) {
	row := q.db.QueryRow(ctx, createUserSession,
		arg.UserID,
		arg.SessionToken,
		arg.IpAddress,
		arg.UserAgent,
		arg.ExpiresAt,
	)
	var i UserSessions
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionToken,
		&i.IpAddress,
		&i.UserAgent,
		&i.IsActive,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteExpiredRefreshTokens = `-- name: DeleteExpiredRefreshTokens :exec
DELETE FROM refresh_tokens WHERE expires_at < NOW()
`

func (q *Queries) DeleteExpiredRefreshTokens(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteExpiredRefreshTokens)
	return err
}

const deleteExpiredUserSessions = `-- name: DeleteExpiredUserSessions :exec
DELETE FROM user_sessions WHERE expires_at < NOW()
`

func (q *Queries) DeleteExpiredUserSessions(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteExpiredUserSessions)
	return err
}

const deleteOldLoginAttempts = `-- name: DeleteOldLoginAttempts :exec
DELETE FROM login_attempts WHERE created_at < $1
`

func (q *Queries) DeleteOldLoginAttempts(ctx context.Context, createdAt pgtype.Timestamp) error {
	_, err := q.db.Exec(ctx, deleteOldLoginAttempts, createdAt)
	return err
}

const getRecentLoginAttempts = `-- name: GetRecentLoginAttempts :many
SELECT id, email, ip_address, success, failure_reason, user_agent, created_at FROM login_attempts 
WHERE email = $1 AND created_at > $2
ORDER BY created_at DESC
`

type GetRecentLoginAttemptsParams struct {
	Email     string             `db:"email" json:"email"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
}

func (q *Queries) GetRecentLoginAttempts(ctx context.Context, arg GetRecentLoginAttemptsParams) ([]LoginAttempts, error) {
	rows, err := q.db.Query(ctx, getRecentLoginAttempts, arg.Email, arg.CreatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []LoginAttempts{}
	for rows.Next() {
		var i LoginAttempts
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.IpAddress,
			&i.Success,
			&i.FailureReason,
			&i.UserAgent,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRefreshToken = `-- name: GetRefreshToken :one
SELECT rt.id, rt.user_id, rt.token_hash, rt.is_revoked, rt.expires_at, rt.created_at, u.id as user_id, u.email, u.name, u.role, u.is_active as user_active
FROM refresh_tokens rt
JOIN users u ON rt.user_id = u.id
WHERE rt.token_hash = $1 AND rt.is_revoked = false AND rt.expires_at > NOW() AND u.is_active = true
`

type GetRefreshTokenRow struct {
	ID         uuid.UUID        `db:"id" json:"id"`
	UserID     uuid.UUID        `db:"user_id" json:"user_id"`
	TokenHash  string             `db:"token_hash" json:"token_hash"`
	IsRevoked  bool               `db:"is_revoked" json:"is_revoked"`
	ExpiresAt  pgtype.Timestamptz `db:"expires_at" json:"expires_at"`
	CreatedAt  pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UserID_2   uuid.UUID        `db:"user_id_2" json:"user_id_2"`
	Email      string             `db:"email" json:"email"`
	Name       string             `db:"name" json:"name"`
	Role       string             `db:"role" json:"role"`
	UserActive bool               `db:"user_active" json:"user_active"`
}

func (q *Queries) GetRefreshToken(ctx context.Context, tokenHash string) (GetRefreshTokenRow, error) {
	row := q.db.QueryRow(ctx, getRefreshToken, tokenHash)
	var i GetRefreshTokenRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TokenHash,
		&i.IsRevoked,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UserID_2,
		&i.Email,
		&i.Name,
		&i.Role,
		&i.UserActive,
	)
	return i, err
}

const getUserSession = `-- name: GetUserSession :one
SELECT us.id, us.user_id, us.session_token, us.ip_address, us.user_agent, us.is_active, us.expires_at, us.created_at, us.updated_at, u.id as user_id, u.email, u.name, u.role, u.is_active as user_active
FROM user_sessions us
JOIN users u ON us.user_id = u.id
WHERE us.session_token = $1 AND us.is_active = true AND us.expires_at > NOW() AND u.is_active = true
`

type GetUserSessionRow struct {
	ID           uuid.UUID        `db:"id" json:"id"`
	UserID       uuid.UUID        `db:"user_id" json:"user_id"`
	SessionToken string             `db:"session_token" json:"session_token"`
	IpAddress    *netip.Addr        `db:"ip_address" json:"ip_address"`
	UserAgent    pgtype.Text        `db:"user_agent" json:"user_agent"`
	IsActive     bool               `db:"is_active" json:"is_active"`
	ExpiresAt    pgtype.Timestamptz `db:"expires_at" json:"expires_at"`
	CreatedAt    pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	UserID_2     uuid.UUID        `db:"user_id_2" json:"user_id_2"`
	Email        string             `db:"email" json:"email"`
	Name         string             `db:"name" json:"name"`
	Role         string             `db:"role" json:"role"`
	UserActive   bool               `db:"user_active" json:"user_active"`
}

func (q *Queries) GetUserSession(ctx context.Context, sessionToken string) (GetUserSessionRow, error) {
	row := q.db.QueryRow(ctx, getUserSession, sessionToken)
	var i GetUserSessionRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionToken,
		&i.IpAddress,
		&i.UserAgent,
		&i.IsActive,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID_2,
		&i.Email,
		&i.Name,
		&i.Role,
		&i.UserActive,
	)
	return i, err
}

const revokeAllUserRefreshTokens = `-- name: RevokeAllUserRefreshTokens :exec
UPDATE refresh_tokens 
SET is_revoked = true
WHERE user_id = $1
`

func (q *Queries) RevokeAllUserRefreshTokens(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, revokeAllUserRefreshTokens, userID)
	return err
}

const revokeAllUserSessions = `-- name: RevokeAllUserSessions :exec
UPDATE user_sessions 
SET is_active = false, updated_at = NOW()
WHERE user_id = $1
`

func (q *Queries) RevokeAllUserSessions(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, revokeAllUserSessions, userID)
	return err
}

const revokeRefreshToken = `-- name: RevokeRefreshToken :exec
UPDATE refresh_tokens 
SET is_revoked = true
WHERE token_hash = $1
`

func (q *Queries) RevokeRefreshToken(ctx context.Context, tokenHash string) error {
	_, err := q.db.Exec(ctx, revokeRefreshToken, tokenHash)
	return err
}

const revokeUserSession = `-- name: RevokeUserSession :exec
UPDATE user_sessions 
SET is_active = false, updated_at = NOW()
WHERE session_token = $1
`

func (q *Queries) RevokeUserSession(ctx context.Context, sessionToken string) error {
	_, err := q.db.Exec(ctx, revokeUserSession, sessionToken)
	return err
}

const updateUserSession = `-- name: UpdateUserSession :exec
UPDATE user_sessions 
SET updated_at = NOW()
WHERE session_token = $1
`

func (q *Queries) UpdateUserSession(ctx context.Context, sessionToken string) error {
	_, err := q.db.Exec(ctx, updateUserSession, sessionToken)
	return err
}
